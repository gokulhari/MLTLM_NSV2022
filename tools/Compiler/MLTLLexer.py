# Generated from MLTL.g by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,197,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,3,18,117,8,18,1,19,1,19,1,20,1,20,
        1,21,1,21,4,21,125,8,21,11,21,12,21,126,1,22,1,22,4,22,131,8,22,
        11,22,12,22,132,1,23,1,23,1,23,5,23,138,8,23,10,23,12,23,141,9,23,
        1,24,1,24,3,24,145,8,24,1,25,3,25,148,8,25,1,25,1,25,5,25,152,8,
        25,10,25,12,25,155,9,25,1,25,3,25,158,8,25,1,26,3,26,161,8,26,1,
        26,4,26,164,8,26,11,26,12,26,165,1,26,1,26,4,26,170,8,26,11,26,12,
        26,171,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,5,31,184,
        8,31,10,31,12,31,187,9,31,1,31,1,31,1,32,4,32,192,8,32,11,32,12,
        32,193,1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,0,53,0,55,0,57,0,59,0,61,0,63,26,
        65,27,1,0,9,2,0,33,33,60,62,2,0,70,72,79,79,3,0,82,83,85,85,89,89,
        2,0,43,43,45,45,1,0,48,57,1,0,49,57,3,0,65,90,95,95,97,122,2,0,10,
        10,13,13,3,0,9,10,13,13,32,32,204,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,
        0,0,3,69,1,0,0,0,5,71,1,0,0,0,7,74,1,0,0,0,9,76,1,0,0,0,11,78,1,
        0,0,0,13,80,1,0,0,0,15,82,1,0,0,0,17,84,1,0,0,0,19,86,1,0,0,0,21,
        90,1,0,0,0,23,93,1,0,0,0,25,95,1,0,0,0,27,97,1,0,0,0,29,102,1,0,
        0,0,31,108,1,0,0,0,33,110,1,0,0,0,35,112,1,0,0,0,37,114,1,0,0,0,
        39,118,1,0,0,0,41,120,1,0,0,0,43,122,1,0,0,0,45,128,1,0,0,0,47,134,
        1,0,0,0,49,144,1,0,0,0,51,157,1,0,0,0,53,160,1,0,0,0,55,173,1,0,
        0,0,57,175,1,0,0,0,59,177,1,0,0,0,61,179,1,0,0,0,63,181,1,0,0,0,
        65,191,1,0,0,0,67,68,5,59,0,0,68,2,1,0,0,0,69,70,5,58,0,0,70,4,1,
        0,0,0,71,72,5,61,0,0,72,73,5,62,0,0,73,6,1,0,0,0,74,75,5,91,0,0,
        75,8,1,0,0,0,76,77,5,93,0,0,77,10,1,0,0,0,78,79,5,44,0,0,79,12,1,
        0,0,0,80,81,5,33,0,0,81,14,1,0,0,0,82,83,5,38,0,0,83,16,1,0,0,0,
        84,85,5,124,0,0,85,18,1,0,0,0,86,87,5,60,0,0,87,88,5,45,0,0,88,89,
        5,62,0,0,89,20,1,0,0,0,90,91,5,45,0,0,91,92,5,62,0,0,92,22,1,0,0,
        0,93,94,5,40,0,0,94,24,1,0,0,0,95,96,5,41,0,0,96,26,1,0,0,0,97,98,
        5,84,0,0,98,99,5,82,0,0,99,100,5,85,0,0,100,101,5,69,0,0,101,28,
        1,0,0,0,102,103,5,70,0,0,103,104,5,65,0,0,104,105,5,76,0,0,105,106,
        5,83,0,0,106,107,5,69,0,0,107,30,1,0,0,0,108,109,5,61,0,0,109,32,
        1,0,0,0,110,111,5,123,0,0,111,34,1,0,0,0,112,113,5,125,0,0,113,36,
        1,0,0,0,114,116,7,0,0,0,115,117,5,61,0,0,116,115,1,0,0,0,116,117,
        1,0,0,0,117,38,1,0,0,0,118,119,7,1,0,0,119,40,1,0,0,0,120,121,7,
        2,0,0,121,42,1,0,0,0,122,124,5,97,0,0,123,125,3,57,28,0,124,123,
        1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,44,1,
        0,0,0,128,130,5,115,0,0,129,131,3,57,28,0,130,129,1,0,0,0,131,132,
        1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,46,1,0,0,0,134,139,3,
        61,30,0,135,138,3,61,30,0,136,138,3,57,28,0,137,135,1,0,0,0,137,
        136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,
        48,1,0,0,0,141,139,1,0,0,0,142,145,3,51,25,0,143,145,3,53,26,0,144,
        142,1,0,0,0,144,143,1,0,0,0,145,50,1,0,0,0,146,148,3,55,27,0,147,
        146,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,153,3,59,29,0,150,
        152,3,57,28,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,
        154,1,0,0,0,154,158,1,0,0,0,155,153,1,0,0,0,156,158,5,48,0,0,157,
        147,1,0,0,0,157,156,1,0,0,0,158,52,1,0,0,0,159,161,3,55,27,0,160,
        159,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,164,3,57,28,0,163,
        162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,
        167,1,0,0,0,167,169,5,46,0,0,168,170,3,57,28,0,169,168,1,0,0,0,170,
        171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,54,1,0,0,0,173,174,
        7,3,0,0,174,56,1,0,0,0,175,176,7,4,0,0,176,58,1,0,0,0,177,178,7,
        5,0,0,178,60,1,0,0,0,179,180,7,6,0,0,180,62,1,0,0,0,181,185,5,35,
        0,0,182,184,8,7,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,
        0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,6,31,
        0,0,189,64,1,0,0,0,190,192,7,8,0,0,191,190,1,0,0,0,192,193,1,0,0,
        0,193,191,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,196,6,32,0,
        0,196,66,1,0,0,0,15,0,116,126,132,137,139,144,147,153,157,160,165,
        171,185,193,1,6,0,0
    ]

class MLTLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    Conditional = 19
    UnaryTemporalOp = 20
    BinaryTemporalOp = 21
    LiteralAtomicIdentifier = 22
    LiteralSignalIdentifier = 23
    Identifier = 24
    Number = 25
    Comment = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "':'", "'=>'", "'['", "']'", "','", "'!'", "'&'", "'|'", 
            "'<->'", "'->'", "'('", "')'", "'TRUE'", "'FALSE'", "'='", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "Conditional", "UnaryTemporalOp", "BinaryTemporalOp", "LiteralAtomicIdentifier", 
            "LiteralSignalIdentifier", "Identifier", "Number", "Comment", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "Conditional", "UnaryTemporalOp", 
                  "BinaryTemporalOp", "LiteralAtomicIdentifier", "LiteralSignalIdentifier", 
                  "Identifier", "Number", "Integer", "Float", "Sign", "Digit", 
                  "NonzeroDigit", "Letter", "Comment", "WS" ]

    grammarFileName = "MLTL.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


